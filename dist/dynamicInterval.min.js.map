{"version":3,"sources":["../src/dynamicInterval.js"],"names":[],"mappings":"uVA2CA,YAAiB,CAIf,MAHA,MAAK,MAAL,CAAY,OAAZ,CAAoB,YAApB,CAGA,CAFA,KAAK,OAAL,GAEA,CADA,KAAK,MAAL,CAAc,EACd,CAAO,IACR,C,mDAYe,kB,CAAT,aAA6D,+EAClE,GAAM,GAAsB,YAAwB,MAAxB,CACxB,kBADwB,CAExB,IAFJ,CAIM,EAAY,CAChB,MAAO,CADS,CAEhB,OAAQ,EAFQ,CAGhB,UAHgB,CAIhB,OAJgB,CAJlB,CA4BA,MAjBC,aAAgC,CAC/B,GAAM,IAAe,GAArB,CAIA,IAAI,IAAJ,EAEA,GAAM,GAAU,WAAW,UAAM,CAC/B,EAAU,KAAV,EAD+B,CAE/B,EAAgB,EAAU,MAA1B,GAF+B,CAG/B,GAH+B,CAI/B,iBACD,CALe,GAAhB,CAOA,EAAU,MAAV,CAAiB,IAAjB,GATA,CAUD,CAfA,EAiBD,EACD,C,GAOe,oB,CAAT,WAAyC,CAC1C,GAAwC,UAA3B,QAAO,GAAU,KADY,EAE5C,EAAU,KAAV,EAEH,C,CAxFD,GAAM,GAA0B,kBAAS,WAAwB,CAAR,EAAzB,CAAhC,CAOM,EAAe,kBAA2B,UAAjB,aAAsC,oBAAhD,CAPrB,CAaM,EAAyB,kBAAS,kBAAM,GAAM,KAAN,EAAN,CAAT,CAb/B,CAqBM,EAAkB,aAAkB,CACxC,GAAM,GAAQ,EAAM,OAAN,GAAd,CACA,MAAe,CAAC,CAAT,IAAc,EAAM,MAAN,GAAoB,CAApB,CAAd,IACR,CAxBD,C","file":"dynamicInterval.min.js","sourcesContent":["/**\n * Exports a function that sets a \"dynamically scheduled\" interval.\n * You give it a callback function and a function to determine the interval delay.\n * @since 3/22/18\n * @file\n */\n\n/**\n * Determines if an interval should terminate.\n * @param {number} delay The interval's delay setting.\n * @returns {boolean} True if the interval should terminate.\n */\n/* eslint-disable-next-line no-restricted-globals */\nconst intervalShouldTerminate = delay => isNaN(delay) || delay < 0;\n\n/**\n * Converts the given input to a function if it wasn't a function already.\n * @param {any} input The thing to convert to a function.\n * @returns {function} The given function, or a function that returns the passed in input.\n */\nconst castFunction = input => (typeof input === 'function' ? input : () => input);\n\n/**\n * The default interval scheduling policy for arrays.\n * @param {Array} array The array to shift from.\n */\nconst intervalArrayScheduler = array => () => array.shift();\n\n/**\n * Removes an item from an array if it exists in it.\n * @param {Array} array The array to remove the `thingy` from.\n * @param {any} thing The thing to remove.\n * @returns {boolean} True if `thingy` was removed, false otherwise.\n */\nconst removeFromArray = (array, thing) => {\n  const index = array.indexOf(thing);\n  return index > -1 && array.splice(index, 1) && true;\n};\n\n/**\n * Clears a \"dynamic interval reference\".\n * @returns {object} The interval object assiociated with this method.\n */\nfunction clear() {\n  this.timers.forEach(clearTimeout);\n  this.cleared = true;\n  this.timers = [];\n  return this;\n}\n\n/**\n * Uses `setTimeout` to create a \"dynamically\" delayed interval.\n * @param {function} callback The callback to invoke on each tick of the interval.\n * @param {function} getNextDelay A function that should return\n * the next delay in the interval series.\n * @param {...any} args A list of arguments to pass to `callback` on each interval invocation.\n * @returns {object} A reference to the timers this dynamic interval is using and a function\n * to clear the dynamic interval (keyed respectively).\n * @export\n */\nexport function setDynamicInterval(callback, getNextDelay, ...args) {\n  const getNextTimeoutDelay = getNextDelay instanceof Array\n    ? intervalArrayScheduler([...getNextDelay])\n    : castFunction(getNextDelay);\n\n  const reference = {\n    calls: 0,\n    timers: [],\n    cleared: false,\n    clear,\n  };\n\n  (function scheduleNextInterval() {\n    const delay = Number(getNextTimeoutDelay());\n\n    // The interval will terminate if given a non-numeric\n    // value, NaN, or a negative number.\n    if (intervalShouldTerminate(delay)) return;\n\n    const timeout = setTimeout(() => {\n      reference.calls++;\n      removeFromArray(reference.timers, timeout);\n      scheduleNextInterval();\n      callback(...args);\n    }, delay);\n\n    reference.timers.push(timeout);\n  }());\n\n  return reference;\n}\n\n/**\n * Clears a dynamic interval.\n * @param {object} reference The interval reference to clear.\n * @returns {undefined}\n */\nexport function clearDynamicInterval(reference) {\n  if (reference && typeof reference.clear === 'function') {\n    reference.clear();\n  }\n}\n\nexport default exports;\n"]}